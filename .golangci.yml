# SPDX-FileCopyrightText: Copyright 2023 Prasad Tengse.
# SPDX-License-Identifier: MIT
#
# yaml-language-server: $schema=https://json.schemastore.org/golangci-lint.json
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

# This file contains only configs which differ from defaults.
# All possible options can be found here
# https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 50
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 0

  dogsled:
    max-blank-identifiers: 2

  gocyclo:
    min-complexity: 50

  dupl:
    threshold: 200

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true
    # Lint about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: false
    exclude-functions:
      - crypto/rand.Read
      - io.Copy(*bytes.Buffer)
      - os/Stderr.Write
      - os/Stdout.Write

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    default-signifies-exhaustive: true

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 250
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 100

  gocognit:
    # Minimal code complexity to report
    min-complexity: 50

  goconst:
    # Minimal length of string constant.
    # Default: 3
    min-len: 3
    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3
    # Ignore test files.
    # Default: false
    ignore-tests: true
    # Look for existing constants matching the values.
    # Default: true
    match-constant: false
    # Search also for duplicated numbers.
    # Default: false
    numbers: true
    # Minimum value, only works with goconst.numbers
    # Default: 3
    min: 3
    # Maximum value, only works with goconst.numbers
    # Default: 3
    max: 3
    # Ignore when constant is not used as function argument.
    # Default: true
    ignore-calls: true
    # Exclude strings matching the given regular expression.
    # Default: ""
    ignore-strings: ""

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false

  goheader:
    # Supports two types 'const' and 'regexp'.
    # Values can be used recursively.
    # Default: {}
    values:
      regexp:
        # Define here regexp type values.
        # for example:
        license: "(BSD\\-3\\-Clause|GPL\\-3\\.0\\-only|GPL\\-2.0\\-only|AGPL\\-3\\.0\\-only|Apache\\-2\\.0|MIT|MPL\\-2.0)"
        copyright: "([Cc]opyright\\s+((\\(c\\)|Â©)\\s+)?[0-9]{4}(.*))"
    template: |-
      SPDX-FileCopyrightText: {{ copyright }}
      SPDX-License-Identifier: {{ license }}

  gomoddirectives:
    # Allow local `replace` directives.
    # Default: false
    replace-local: false
    # List of allowed `replace` directives.
    # Default: []
    replace-allow-list: []
    # Allow to not explain why the version has been retracted in the `retract` directives.
    # Default: false
    retract-allow-no-explanation: false
    # Forbid the use of the `exclude` directives.
    # Default: false
    exclude-forbidden: false

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        # Use google.golang.org/protobuf.
        - github.com/golang/protobuf:
            reason: >-
              See https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules
            recommendations:
              - google.golang.org/protobuf

        # Do not use github.com/stretchr/testify
        - github.com/stretchr/testify:
            reason: >-
              Do not use generic assertion packages for tests.
              For comparing complex structs, use github.com/google/go-cmp/cmp.

        # Go 1.12 introduced os.UserHomeDir().
        - github.com/mitchellh/go-homedir:
            reason: "Use os.UserHomeDir() from stdlib."

        # Go 1.20 introduced errors.Join.
        - github.com/hashicorp/go-multierror:
            reason: "Use errors.Join() from from stdlib."
        - go.uber.org/multierr:
            reason: "Use errors.Join() from from stdlib."
        - github.com/pkg/errors:
            reason: "Use error wrapping directive(%w) in stdlib"

        # Go 1.19 introduced New atomic types.
        - go.uber.org/atomic:
            reason: "Use sync/atomic from stdlib."

        # Go 1.20 introduced fallback roots.
        - github.com/certifi/gocertifi:
            recommendations:
              - golang.org/x/crypto/x509roots/fallback
        - github.com/breml/rootcerts:
            recommendations:
              - golang.org/x/crypto/x509roots/fallback
        - github.com/gwatts/rootcerts:
            recommendations:
              - golang.org/x/crypto/x509roots/fallback
        - github.com/alexflint/stdroots:
            recommendations:
              - golang.org/x/crypto/x509roots/fallback
        - github.com/hashicorp/go-rootcerts:
            recommendations:
              - golang.org/x/crypto/x509roots/fallback

        # Go 1.20 introduced log/slog use it or github.com/tprasadtp/log wrapper.
        - github.com/hashicorp/go-hclog:
            recommendations:
              - log/slog
              - github.com/tprasadtp/log
        - github.com/rs/zerolog:
            recommendations:
              - log/slog
              - github.com/tprasadtp/log
        - github.com/sirupsen/logrus:
            recommendations:
              - log/slog
              - github.com/tprasadtp/log
        - go.uber.org/zap:
            recommendations:
              - log/slog
              - github.com/tprasadtp/log

        # Use github.com/tprasadtp/go-autotune
        - go.uber.org/automaxprocs:
            reason: >-
              Does not handle fractional CPUs well and does not support Windows.
            recommendations:
              - github.com/tprasadtp/go-autotune
        - github.com/KimMachineGun/automemlimit:
            reason: >-
              Does not support cgroups mounted at non standard location,
              does not support memory.high and does not support Windows.
            recommendations:
              - github.com/tprasadtp/go-autotune

        # Use github.com/tprasadtp/go-githubapp
        - github.com/bradleyfalzon/ghinstallation:
            reason: >-
              Does not support KMS backed keys or keys implementing crypto.Signer.
            recommendations:
              - github.com/tprasadtp/go-githubapp

        - github.com/bradleyfalzon/ghinstallation/v2:
            reason: >-
              Does not support KMS backed keys or keys implementing crypto.Signer.
            recommendations:
              - github.com/tprasadtp/go-githubapp

  # depguard is only used for checking stdlib packages. gomodguard is used for modules.
  # See https://github.com/ryancurrah/gomodguard/issues/12.
  depguard:
    # Rules to apply.
    #
    # Variables:
    # - File Variables
    #   you can still use and exclamation mark ! in front of a variable to say not to use it.
    #   Example !$test will match any file that is not a go test file.
    #
    #   `$all` - matches all go files
    #   `$test` - matches all go test files
    #
    # - Package Variables
    #
    #  `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
    #
    # Default: Only allow $gostd in all files.
    rules:
      # Name of a rule.
      stdlib-blocked-packages:
        # Used to determine the package matching priority.
        # There are three different modes: `original`, `strict`, and `lax`.
        # Default: "original"
        list-mode: lax # allow unless explicitly denied
        files:
          - $all
        allow:
          - math/rand/v2
        deny:
          - pkg: math/rand
            desc: >-
              Use math/rand/v2, introduced in Go 1.22.

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    forbid:
      # Builtin print function:
      - p: "^print.*$"
        msg: "Do not commit print builtin statements."

      # fmt.Prinf|Println
      - p: '^fmt\.Print.*$'
        msg: "Do not commit print statements."
        pkg: "^fmt$"

      # Use secure DLL loading on Windows.
      - p: '^syscall\.(Must)?LoadDLL.*$'
        msg: "Use NewLazySystemDLL in golang.org/x/sys/windows for a secure way to load system DLLs."
        pkg: "^syscall$"

      - p: '^windows\.(MustLoadDLL|LoadDLL|NewLazyDLL).*$'
        msg: "Use NewLazySystemDLL for a secure way to load system DLLs."
        pkg: "^golang.org/x/sys/windows$"

    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude-godoc-examples: true

    # Instead of matching the literal source code,
    # use type information to replace expressions with strings that contain the package name
    # and (for methods and fields) the type name.
    # This makes it possible to handle import renaming and forbid struct fields and methods.
    # Default: false
    analyze-types: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too noisy, automatic fixe removes code comments.
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

  musttag:
    # A set of custom functions to check in addition to the builtin ones.
    # Default: json, xml, gopkg.in/yaml.v3, BurntSushi/toml, mitchellh/mapstructure, jmoiron/sqlx
    functions:
      # The full name of the function, including the package.
      - name: github.com/hashicorp/hcl/v2/hclsimple.DecodeFile
        # The struct tag whose presence should be ensured.
        tag: hcl
        # The position of the argument to check.
        arg-pos: 2

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nestif:
    # [Default: 5]
    min-complexity: 9

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation:
      - cyclop
      - errcheck
      - funlen
      - gochecknoglobals
      - gocognit
      - gocyclo
      - lll
      - nestif
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  nonamedreturns:
    # Report named error if it is assigned inside defer.
    # Default: false
    report-error-in-defer: false

  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    int-conversion: true
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: false
    # Optimizes `fmt.Errorf`.
    # Default: true
    errorf: true
    # Optimizes `fmt.Sprintf` with only one argument.
    # Default: true
    sprintf1: true
    # Optimizes into strings concatenation.
    # Default: true
    # code is not more readable with string concatenation and mostly saves single alloc.
    strconcat: false

  protogetter:
    # Skip files generated by specified generators from the checking.
    # Checks only the file's initial comment, which must follow the format: "// Code generated by <generator-name>".
    # Files generated by protoc-gen-go, protoc-gen-go-grpc, and protoc-gen-grpc-gateway are always excluded automatically.
    # Default: []
    skip-generated-by: []
    # Skip files matching the specified glob pattern from the checking.
    # Default: []
    skip-files:
      - "*.pb.go"
      - "*/vendor/*"
    # Skip any generated files from the checking.
    # Default: false
    skip-any-generated: true
    # Skip first argument of append function.
    # Default: false
    replace-first-arg-in-append: false

  sloglint:
    # Enforce not mixing key-value pairs and attributes.
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-mixed-arguments
    # Default: true
    no-mixed-args: true
    # Enforce using key-value pairs only (overrides no-mixed-args, incompatible with attr-only).
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-value-pairs-only
    # Default: false
    kv-only: false
    # Enforce using attributes only (overrides no-mixed-args, incompatible with kv-only).
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#attributes-only
    # Default: false
    attr-only: true
    # Enforce not using global loggers.
    # Values:
    # - "": disabled
    # - "all": report all global loggers
    # - "default": report only the default slog logger
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
    # Default: ""
    no-global: "default"
    # Enforce using methods that accept a context.
    # Values:
    # - "": disabled
    # - "all": report all contextless calls
    # - "scope": report only if a context exists in the scope of the outermost function
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only
    # Default: ""
    context: "scope"
    # Enforce using static values for log messages.
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#static-messages
    # Default: false
    static-msg: true
    # Enforce using constants instead of raw keys.
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-raw-keys
    # Default: false
    no-raw-keys: false
    # Enforce a single key naming convention.
    # Values: snake, kebab, camel, pascal
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-naming-convention
    # Default: ""
    key-naming-case: ""
    # Enforce not using specific keys.
    # Default: []
    forbidden-keys:
      - time
      - level
      - msg
      - source
      - level
    # Enforce putting arguments on separate lines.
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#forbidden-keys
    # Default: false
    args-on-sep-lines: true

  spancheck:
    # Checks to enable.
    # Options include:
    # - `end`: check that `span.End()` is called
    # - `record-error`: check that `span.RecordError(err)` is called when an error is returned
    # - `set-status`: check that `span.SetStatus(codes.Error, msg)` is called when an error is
    #    returned
    # Default: ["end"]
    checks:
      - end
    # A list of regexes for function signatures that silence `record-error` and
    # `set-status` reports if found in the call path to a returned error.
    # https://github.com/jjti/go-spancheck#ignore-check-signatures
    # Default: []
    ignore-check-signatures: []
    # A list of regexes for additional function signatures that create spans.
    # This is useful if you have a utility method to create spans.
    # Each entry should be of the form `<regex>:<telemetry-type>`, where `telemetry-type`
    # can be `opentelemetry` or `opencensus`.
    # https://github.com/jjti/go-spancheck#extra-start-span-signatures
    # Default: []
    extra-start-span-signatures: []

  tagalign:
    # Align and sort can be used together or separately.
    #
    # Whether enable align. If true, the struct tags will be aligned.
    # e.g.:
    # type FooBar struct {
    #     Bar    string `json:"bar" validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # will be formatted to:
    # type FooBar struct {
    #     Bar    string `json:"bar"     validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # Default: true.
    align: true
    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # e.g.: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    # Default: true
    sort: true
    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    # Default: []
    order:
      - json
      - yaml
      - yml
      - toml
      - mapstructure
      - validate
    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    # Default: false
    strict: true

  tenv:
    # The option `all` will run against whole test files
    # (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`,
    # and `testing.TB` as arguments are checked.
    # Default: false
    all: false

  # A linter that detect the possibility to use variables/constants from the Go standard library.
  # See https://golangci-lint.run/usage/linters/#usestdlibvars
  usestdlibvars:
    # Suggest the use of http.MethodXX.
    # Default: true
    http-method: true
    # Suggest the use of http.StatusXX.
    # Default: true
    http-status-code: true
    # Suggest the use of time.Weekday.String().
    # Default: true
    time-weekday: true
    # Suggest the use of time.Month.String().
    # Default: false
    time-month: true
    # Suggest the use of time.Layout.
    # Default: false
    time-layout: true
    # Suggest the use of crypto.Hash.String().
    # Default: false
    crypto-hash: true
    # Suggest the use of rpc.DefaultXXPath.
    # Default: false
    default-rpc-path: false
    # Suggest the use of sql.LevelXX.String().
    # Default: false
    sql-isolation-level: true
    # Suggest the use of tls.SignatureScheme.String().
    # Default: false
    tls-signature-scheme: true
    # Suggest the use of constant.Kind.String().
    # Default: false
    constant-kind: true

linters:
  disable-all: true
  enable:
    ## Enabled by default
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gosimple # specializes in simplifying a code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks for unused constants, variables, functions and types

    ## Disabled by default
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - containedctx # detects struct contained context.Context field
    - cyclop # checks function and package cyclomatic complexity
    - depguard # checks if package imports are in a list of acceptable packages
    - dogsled # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # tool for code clone detection
    - durationcheck # checks for two durations multiplied together
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # checks exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # forbids identifiers
    - funlen # tool for detection of long functions
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - goheader # checks for headers
    - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # allow and block lists linter for direct Go module dependencies.
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - gochecksumtype # run exhaustiveness checks on Go "sum types"
    - importas # enforces consistent import aliases
    - inamedparam # linter that reports interfaces with unnamed method parameters.
    - intrange # find places where for loops could make use of an integer range.
    - interfacebloat # checks the number of methods inside an interface
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # detect wrong mirror patterns of bytes/strings usage.
    - musttag # ensure field tags in (un)marshaled structs.
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative.
    - prealloc #  finds slice declarations that could potentially be preallocated
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - promlinter # checks Prometheus metrics naming via promlint
    - protogetter # checks direct reads from proto message fields when getters should be used.
    - reassign # checks that package variables are not reassigned
    - revive # fast, configurable, extensible, flexible, and beautiful linter.
    - rowserrcheck # checks whether Err of rows is checked successfully.
    - sloglint # lint log/slog usage.
    - spancheck # checks for mistakes with OpenTelemetry/OpenCensus spans.
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - stylecheck # is a replacement for golint
    - tagalign # checks that struct tags are well aligned.
    - tenv # detects using os.Setenv instead of t.Setenv since Go1.17
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace
    - wrapcheck # checks that errors returned from external packages are wrapped

    ## you may want to enable
    #- godox # detects FIXME, TODO and other comment keywords

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50
  exclude-rules:
    # It is mostly okay to shadow err. ineffassign will warn,
    # if error checking is not done immediately. However,
    # same MUST NOT be done for ctx as context is a "container".
    - linters:
        - govet
      text: 'shadow: declaration of "err" shadows declaration at'

    # In many cases multiple conditions are expected, keep format consistant.
    # for both single condition and multi-condition selects.
    - linters:
        - gosimple
      text: "S1000: should use for range instead of for { select {} }"

    # Ignore long lines for go generate.
    - source: "^//\\s*go:generate\\s"
      linters:
        - lll

    # Test might add more checks to the else branch and keep them uniform
    # across all test cases. This also keeps test code unform.
    - path: '(.+)_test\.go'
      text: "elseif: can replace 'else {if cond {}}' with 'else if cond {}'"

    # Disable some linters for testing code.
    - path: '(.+)_test\.go'
      linters:
        - containedctx
        - cyclop
        - dupl
        - funlen
        - gocognit
        - goconst
        - gocyclo
        - nestif
        - sloglint
        - wrapcheck

    # Disable some linters for generated code.
    - path: 'testdata\.go'
      linters:
        - funlen
        - gochecknoglobals
        - gocognit
        - goconst
        - gocyclo
        - sloglint
        - wrapcheck

    # Disable some linters for ad-hoc scripts and example scripts.
    - path: '(example|generate)\.go'
      linters:
        - forbidigo
        - gochecknoglobals
        - gocognit
        - gocyclo
        - sloglint
        - wrapcheck

    # Disable some linters for examples.
    - path: '(.*)(example(s)?)(.*)?(_test)\.go'
      linters:
        - dupl
        - forbidigo
        - gochecknoglobals
        - gocognit
        - gocyclo
        - goheader
        - sloglint
        - wrapcheck
