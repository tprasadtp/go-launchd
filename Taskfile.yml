# SPDX-FileCopyrightText: Copyright 2024 Prasad Tengse
# SPDX-License-Identifier: MIT
#
# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: "3"

vars:
  # Go coverage data directory is root Taskfile's directory + '.gocover'.
  GO_COVER_DIR: '{{ joinPath .ROOT_DIR ".gocover" }}'

tasks:
  # -----------------------------------------------------------------
  # Default Task. Shows List of available tasks.
  #
  # This intentionally lacks a desc field to hide it from help output.
  # -----------------------------------------------------------------
  default:
    cmds:
      - cmd: task --list
        silent: true
  # -----------------------------------------------------------------
  # Creates a directory if not present.
  # -----------------------------------------------------------------
  internal:mkdir:
    internal: true
    cmds:
      # On non Unix platforms this task will be skipped.
      - task: internal:mkdir:unix
        vars:
          DIRECTORY: "{{ .DIRECTORY }}"
      # On non Windows platforms this task will be skipped.
      - task: internal:mkdir:windows
        vars:
          DIRECTORY: "{{ .DIRECTORY }}"
    requires:
      vars:
        - DIRECTORY
  internal:mkdir:windows:
    internal: true
    platforms:
      - windows
    cmds:
      - cmd: powershell.exe -NonInteractive -NoProfile -NoLogo -Command 'New-Item -ItemType Directory -Force -Path "{{.DIRECTORY}}"'
    status:
      - powershell.exe -NonInteractive -NoProfile -NoLogo -Command 'Get-Item -LiteralPath "{{.DIRECTORY}}"'
    requires:
      vars:
        - DIRECTORY
  internal:mkdir:unix:
    internal: true
    platforms:
      - linux
      - darwin
      - freebsd
      - netbsd
      - dragonfly
      - openbsd
    cmds:
      - cmd: mkdir -p {{.DIRECTORY|quote}}
    status:
      - "test -d {{.DIRECTORY|quote}}"
    requires:
      vars:
        - DIRECTORY
  # -----------------------------------------------------------------
  # Removes files with PATTERN in the given DIRECTORY.
  # -----------------------------------------------------------------
  internal:rm-file-glob:
    internal: true
    cmds:
      # On non Unix platforms this task will be skipped.
      - task: internal:rm-file-glob:unix
        vars:
          DIRECTORY: "{{ .DIRECTORY }}"
          PATTERN: "{{ .PATTERN }}"
      # On non Windows platforms this task will be skipped.
      - task: internal:rm-file-glob:windows
        vars:
          DIRECTORY: "{{ .DIRECTORY }}"
          PATTERN: "{{ .PATTERN }}"
    requires:
      vars:
        - DIRECTORY
        - PATTERN
  internal:rm-file-glob:unix:
    internal: true
    platforms:
      - linux
      - darwin
      - freebsd
      - netbsd
      - dragonfly
      - openbsd
    cmds:
      - cmd: rm -f {{ joinPath (.DIRECTORY | quote) .PATTERN }}
    requires:
      vars:
        - DIRECTORY
        - PATTERN
  internal:rm-file-glob:windows:
    internal: true
    platforms:
      - windows
    cmds:
      - cmd: powershell.exe -NonInteractive -NoProfile -NoLogo -Command 'Remove-Item -Force -Path "{{ joinPath .DIRECTORY .PATTERN  }}"'
    status:
      # Test if DIRECTORY exists, throw an exception, and task will be skipped.
      - powershell.exe -NonInteractive -NoProfile -NoLogo -Command 'if (Test-Path {{ printf `"%s"` .DIRECTORY }}) {throw "dir exists"}'
    requires:
      vars:
        - DIRECTORY
        - PATTERN
  # -----------------------------------------------------------------
  # Create .gocover directory to store coverage data
  # -----------------------------------------------------------------
  go:internal:create-coverage-dir:
    internal: true
    cmds:
      - task: internal:mkdir
        vars:
          DIRECTORY: "{{ .GO_COVER_DIR }}"
  # -----------------------------------------------------------------
  # Cleanup coverage data.
  #
  # This only attempts to cleanup files generated by go toolchain.
  # Other files are intentionally ignored.
  # -----------------------------------------------------------------
  clean-coverage:
    desc: "Go: Clean coverage files generated."
    aliases:
      - go:clean-coverage
      - clean-cover
    cmds:
      - task: internal:rm-file-glob
        vars:
          DIRECTORY: "{{ .GO_COVER_DIR }}"
          PATTERN: "{{ .ITEM }}"
        for:
          - "covcounters.*"
          - "covmeta.*"
          - "coverage.*"
  # -----------------------------------------------------------------
  # Test go package as specified by GO_TEST_PKG.
  # -----------------------------------------------------------------
  go:internal:test-pkg:
    internal: true
    deps:
      # Create .gocover directory to store coverage data
      - go:internal:create-coverage-dir
    cmds:
      # - Do not use '-{flag}={arg}' format if arg contains dot '.', or single dashes '-'
      #   for flag with dot '.' (like test.v) as PowerShell mangles it.
      #   See https://github.com/PowerShell/PowerShell/issues/6291#issuecomment-747104988.
      # - Flag --test.gocoverdir must be specified after package name, as it is not handled correctly by
      #   go tool. Also, --test.gocoverdir must be an absolute path.
      - cmd: go test {{ .GO_TEST_FLAG_VERBOSE }} -cover -timeout {{ default "3m" .GO_TEST_TIMEOUT }} {{ .GO_TEST_PKG }} {{ .GO_TEST_FLAG_COVERDIR -}}
    requires:
      vars:
        - GO_TEST_PKG
    vars:
      GO_TEST_FLAG_COVERDIR: '{{ if .GO_COVER_DIR}}--test.gocoverdir {{ printf `"%s"` .GO_COVER_DIR }}{{end}}'
      GO_TEST_FLAG_VERBOSE: '{{ if or (eq .RUNNER_DEBUG "1") (eq .DEBUG "1") (eq .DEBUG "yes") (eq .DEBUG "true") }}-v{{end}}'
  # -----------------------------------------------------------------
  # Run all configured linters.
  # -----------------------------------------------------------------
  lint:
    desc: "Go: Run all configured linters"
    prefix: "lint"
    aliases:
      - "go:lint"
      - "golangci-lint"
    cmd: golangci-lint run
  # -----------------------------------------------------------------
  # Test all packages with coverage.
  # -----------------------------------------------------------------
  test:
    desc: "Go: Test all packages"
    aliases:
      - "go:test"
    cmds:
      - task: go:internal:test-pkg
        vars:
          GO_TEST_PKG: ./...
